//======================================================
//		    INITITIALIZATION
//======================================================

//Create our HashTable, Array() or whatever else you prefer working with
HashTable<const char*> g_packetIgnore;

//Build ignore list: In C++ '98, temp is fixing and issue (solved in C++0x), you cannot use
//literal strings with templates. See ref 14.3.2 in the standards.
const char *temp;
temp = "s"; g_packetIgnore.insert(PCKT_X_DEBUG,temp); //String
temp = ""; g_packetIgnore.insert(PCKT_X_HACKING_ATTEMPT,temp); //None
temp = "dss"; g_packetIgnore.insert(PCKT_R_DOWNLOAD,temp); //Dword, String, String
temp = ""; g_packetIgnore.insert(PCKT_R_DOWNLOAD_EOF,temp); //None

//======================================================
//		SAMPLE PACKET FOR TESTING?
//======================================================
ByteArray capsule;
capsule.add<CMD>(PCKT_R_DOWNLOAD);
capsule.add<DWORD>(123456);
capsule.addString("PARAM11");
capsule.addString("PARAM2222");

//======================================================
//		    PACKET HANDLING
//======================================================
CMD cmd = capsule.read<CMD>();

if (g_packetIgnore.exists(cmd)) {
	//This packet command is in the ignore list!
	for (const char *current = g_packetIgnore[cmd]; current<g_packetIgnore[cmd]+strlen(g_packetIgnore[cmd]); current++) {
		//std::cout << "Char is: " << *current << std::endl;
		switch (*current) {
			case 's':
				capsule.readString();
				break;
			case 'd':
				capsule.read<DWORD>();
				break;
			case 'w':
				capsule.read<WORD>();
				break;
			case 'b':
				capsule.read<BYTE>();
				break;
			case 'a':
				capsule.read<ACK>();
				break;
			default:
				//error
				break;
		}
	}
} else {
	//This packet is important. Do your job as usual, switch case or whatever here
}